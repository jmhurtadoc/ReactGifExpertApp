{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","placeholder","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","i","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifts","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAGMA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,GAAcA,EAAWK,OAAOC,OAAS,IAC3CR,GAAc,SAACS,GAAD,OAAYP,EAAWK,QAAvB,mBAAkCE,OAChDN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,YAAY,oBACZC,SAlBoB,SAACR,GACzBF,EAAcE,EAAES,OAAOH,YAuB3BZ,EAAYgB,WAAa,CACvBf,c,OAAegB,EAAUC,KAAKC,YAGjBnB,Q,uBClCFoB,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,sDACJ,mCADI,cAEqDC,UAAWH,GAFhE,wCAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MACTV,IAAG,UAAEQ,EAAEG,cAAJ,aAAE,EAAUC,iBAAiBZ,QATjB,kBAYZM,GAZY,4CAAH,sDCYLO,EAVK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,yBAAKc,UAAU,2CACb,2BAAIJ,GACJ,yBAAKD,GAAIA,EAAIM,IAAKf,EAAKgB,IAAKN,MCkBnBO,EApBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDL,SAACA,GAAc,IAAD,EACfnB,mBAAS,CACjC0B,KAAM,GACNa,SAAS,IAH8B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OAVAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAGGqB,EDd2BK,CAAc1B,GAAlCa,EADkB,EACxBN,KAAca,EADU,EACVA,QACtB,OACE,oCACE,gCAAMpB,EAAN,KAEGoB,GAAW,uCAEd,yBAAKJ,UAAU,aACZH,EAAOJ,KAAI,SAACkB,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAIhB,IAAQgB,UEczBE,EAxBM,WAAO,IAAD,EACWhD,mBAAS,CAAC,cADrB,mBAClBiD,EADkB,KACNlD,EADM,KAQzB,OACE,oCACE,8CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACGkD,EAAWrB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,UChB5C+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.2465e72b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CategoryAdd = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue && inputValue.trim().length > 2) {\r\n      setCategories((cats) => [ inputValue.trim(), ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        placeholder=\"Agregar Categoria\"\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nCategoryAdd.protoTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CategoryAdd;\r\n","export const getGifs = async ( category ) => {\r\n    const apiKey = \"Z3uLD82ic3zFDUtmsm2rix6IQ5PmK4Q1\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${ encodeURI( category )}&limit=10&offset=0&lang:=es`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((i) => {\r\n      return {\r\n        id: i.id,\r\n        title: i.title,\r\n        url: i.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n}","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className='card animate__animated animate__flipInX'>\r\n      <p>{title}</p>\r\n      <img id={id} src={url} alt={title} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifts } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifts(category);\r\n  return (\r\n    <>\r\n      <h3> {category} </h3>\r\n\r\n        {loading && <p>Cargando</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n/* {images.map((img) => {\r\nreturn <li key={img.id}> {img.title} </li>\r\n})} */\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifts = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n  //el segundo argumento es un arreglo, si esta vacio solo ejecuta el codigo una vez cuando el codigo es renderizado.\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport CategoryAdd from \"./components/CategoryAdd\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Piece\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   //   setCategories ( [...categories, 'Monster Rancher']);\r\n  //   setCategories((cats) => [...cats, \"Monster Rancher\"]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2> GifExpertApp </h2>\r\n      <hr></hr>\r\n      <CategoryAdd setCategories={setCategories}></CategoryAdd>\r\n      <hr></hr>\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}